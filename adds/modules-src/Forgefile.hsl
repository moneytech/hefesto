include ~/toolsets/null/null.hsl
include ~/toolsets/utils/forge_projects.hsl
include ~/fsutil.hsl

var exit_code type int;

project hefesto-modules : toolset "no-tool-any-set" : 0;

var publish type list;

hefesto-modules.prologue() {
    $publish = hefesto.sys.get_option("publish");
    if ($publish.count() == 0) {
        var cwd type list;
        hefesto.sys.echo("-- Now forging all sub-projects... wait...\n\n");
        $cwd = lsdir();
        $exit_code = forge_projects($cwd);
    } else {
        hefesto.sys.echo("-- Now publishing all modules configurated in \"mod-dir-struct.conf\"... wait...\n\n");
        $exit_code = publisher();
    }
}

hefesto-modules.epilogue() {
    if ($publish.count() == 0) {
        if ($exit_code == 0) {
            hefesto.sys.echo("\n-- Forge successful\n\n");
        } else {
            hefesto.sys.echo("\n-- Forge failure!\n\n");
        }
    } else {
        if ($exit_code == 0) {
            hefesto.sys.echo("-- Published!\n\n");
        } else {
            hefesto.sys.echo("-- Publishing failure!\n\n");
        }
    }
}

# Module publishing stuff

local function clean_directory(dir type list) : result type none {
    var d type int;
    var curr_path type string;
    var old_path type string;
    $d = 0;
    while ($d < $dir.count()) {
        $curr_path = $dir.item($d);
        if (isdir($curr_path) == 1) {
            $old_path = hefesto.sys.pwd();
            hefesto.sys.cd($curr_path);
            clean_directory(lsdir());
            hefesto.sys.cd($old_path);
            hefesto.sys.rmdir($curr_path);
        } else {
            hefesto.sys.rm($curr_path);
        }
        $d = $d + 1;
    }
}

local function is_comment(line type string) : result type int {
    var l type int;
    $l = 0;
    while (($line.at($l) == "\n") ||
           ($line.at($l) == "\r") ||
           ($line.at($l) == " ")  ||
           ($line.at($l) == "\t") &&
           ($l < $line.len())) {
        $l = $l + 1;
    }
    result ($line.at($l) == "#");
}

local function is_blankline(line type string) : result type int {
    var l type int;
    var is_blankline type int;
    $is_blankline = 1;
    $l = 0;
    while (($is_blankline == 1) && ($l < $line.len())) {
        $is_blankline = ($line.at($l) == "\n") ||
                        ($line.at($l) == "\r") ||
                        ($line.at($l) == "\t") ||
                        ($line.at($l) == " ");
        $l = $l + 1;
    }
    result $is_blankline;
}

local function ld_mod_dir_struct(platform type list, modname type list, target_subdir type list) : result type none {
    var raw_file type list;
    var r type int;
    var line type string;
    var l type int;
    var data2add type string;
    var state type int;
    $raw_file = hefesto.sys.lines_from_file("mod-dir-struct.conf", ".*");
    $r = 0;
    while ($r < $raw_file.count()) {
        $line = $raw_file.item($r);
        if ((is_blankline($line) == 0) &&
            (is_comment($line) == 0)) {
            $state = 0;
            $l = 0;
            while ($state < 3) {
                while (($line.at($l) == " ") ||
                       ($line.at($l) == "\t")) {
                    $l = $l + 1;
                }
                $data2add = "";
                while (($l < $line.len()) &&
                       ($line.at($l) != " ") &&
                       ($line.at($l) != "\t")) {
                    $data2add = $data2add + $line.at($l);
                    $l = $l + 1;
                }
                if ($state == 0) {
                    $platform.add_item($data2add);
                } else if ($state == 1) {
                    $modname.add_item($data2add);
                } else if ($state == 2) {
                    $target_subdir.add_item($data2add);
                }
                $state = $state + 1;
            }
        }
        $r = $r + 1;
    }
    hefesto.sys.byref($platform);
    hefesto.sys.byref($modname);
    hefesto.sys.byref($target_subdir);
}

function publisher() : result type int {
    var oldpath type string;
    var publishing_exit_code type int;
    $publishing_exit_code = 1;

    # cleaning the modules directory
#    $oldpath = hefesto.sys.pwd();
#    hefesto.sys.cd("../../module");
#    clean_directory(lsdir());
#    hefesto.sys.cd($oldpath);

    var platform type list;
    var modname type list;
    var target_subdir type list;

    # reading "mod-dir-struct.conf"

    ld_mod_dir_struct($platform, $modname, $target_subdir);
    $publishing_exit_code = publish_modules($platform, $modname, $target_subdir);

    result $publishing_exit_code;
}

local function publish_modules(platform type list, modname type list, target_subdir type list) : result type int {
    var i type int;
    var platform_it type string;
    var modname_it type string;
    var target_subdir_it type string;
    var src_path type string;
    var dest_path type string;
    var res type int;
    var filter type string;
    var exit_code type int;
    $exit_code = 1;
    $i = 0;
    $res = 1;
    while ($i < $platform.count() && $res == 1) {
        $platform_it = $platform.item($i);
        $filter = ".*" + hefesto.sys.os_name() + ".*";
        if ($platform_it.match($filter) == 1) {
            $modname_it = $modname.item($i);
            $target_subdir_it = $target_subdir.item($i);
            $src_path = hefesto.sys.make_path("src", $modname_it);
            $src_path = hefesto.sys.make_path($src_path, "bin");
            $dest_path = hefesto.sys.make_path("../../module", $modname_it);
            if (isdir($dest_path) == 0) {
                hefesto.sys.mkdir($dest_path);
            }
            hefesto.sys.echo("-- Copying from " + hefesto.sys.make_path($src_path, "*") + " to " + $dest_path + "...\n");
            $res = hefesto.sys.cp($src_path, $dest_path);
            if ($res == 0) {
                hefesto.sys.echo("-- Failure...\n\n");
            } else {
                hefesto.sys.echo("-- Done.\n\n");
            }
        }
        $i = $i + 1;
    }
    if ($res == 1) {
        $exit_code = 0;
    }
    result $exit_code;
}
