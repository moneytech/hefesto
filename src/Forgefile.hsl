#
# "Forgefile.hsl"
#
#  Description: Hefesto's Main Forgefile.
#
#       by Rafael Santiago
#

#
# Relevant user options:
#
#       --includes=<list>       # defines extra includes' directories;
#       --libraries=<list>      # defines extra libraries' directories;
#       --ldflags=<list>        # defines extra linking options;
#       --cflags=<list>         # defines extra compiler options;
#       --install               # requests the compiled package installing;

include ~/toolsets/gcc/gcc-app.hsl
include ~/toolsets/common/utils/lang/c/dependency_scanner.hsl
include version_handler.hsl

var sources type list;
var includes type list;
var libraries type list;
var ldflags type list;
var cflags type list;

var deps type string;

project hefesto : toolset "gcc-c-app" : dependencies $deps :
                                                     $sources,
                                                     $includes,
                                                     $cflags,
                                                     $libraries,
                                                     $ldflags,
                                                     "../bin/hefesto";

function config_basic_ld_deps() : result type none {
    $ldflags.add_item("here/src/lib/libhere.a");
    var os type string;
    $os = hefesto.sys.os_name();
    if ($os == "linux") {
        $ldflags.add_item("-lpthread");
        $ldflags.add_item("-ldl");
    }
    if ($os == "freebsd") {
        $ldflags.add_item("-lpthread");
        $ldflags.add_item("-lexecinfo");
    }
    if (hefesto.sys.os_name() == "windows") {
        $ldflags.del_item("-rdynamic");
    }
}

hefesto.prologue() {
    hefesto.sys.echo("-- building...\n");
    if (hfst_version_config() == 1) {
        # Now we'll invoke the libhere's forge
        hefesto.sys.cd("here/src");
        hefesto.sys.forge("here", "Forgefile.hsl", "--compile-model=debug --obj-output-dir=obj --bin-output-dir=lib");
        hefesto.sys.cd("../..");
        # If all ok, now we forge the Hefesto app...
        if (hefesto.sys.last_forge_result() == 0) {
            # Getting user options if it exists
            $includes = hefesto.sys.get_option("includes");
            $libraries = hefesto.sys.get_option("libraries");
            $ldflags = hefesto.sys.get_option("ldflags");
            $cflags = hefesto.sys.get_option("cflags");
            $cflags.add_item("-Wall");
            # Setting some basic dependencies needed for a successful linking
            config_basic_ld_deps();
            hefesto.sys.echo("--\n");
            $deps = get_c_cpp_deps();
            $sources.ls(".*\.c$");
        }
    } else {
        hefesto.sys.exit(1);
    }
}

hefesto.epilogue() {
    if (hefesto.sys.last_forge_result() == 0) {
        # Now forging & running the unit tests
        hefesto.sys.cd("tests/unit");
        hefesto.sys.forge("hfst-unit", "Forgefile.hsl", "--includes=../../here/src --libraries=../../here/src/lib");
        hefesto.sys.cd("../../");
        if (hefesto.sys.last_forge_result() == 0) {
            hefesto.sys.echo("-- build succeded.\n");
            var install type list;
            $install = hefesto.sys.get_option("install");
            if ($install.count() > 0) {
                hefesto.sys.cd("../setup");
                hefesto.sys.forge("hefesto-install", "hfst-inst.hsl", "");
                hefesto.sys.cd("../src");
            } else {
                var releasebuild type list;
                $releasebuild = hefesto.sys.get_option("release-build");
                if ($releasebuild.count() > 0) {
                    hefesto.sys.forge("hfst-packman", "Package.hls", "");
                    if (hefesto.sys.last_forge_result() != 0) {
                        hefesto.project.abort(1);
                    }
                }
            }
        } else {
            hefesto.sys.echo("-- build failed, please check and try again...\n");
        }
    } else {
        hefesto.sys.echo("-- build failed, please check and try again...\n");
    }
}
